/*
	设计原则：
	1、开放封闭原则：函数是可拓展不可改动的！
	2、单一职责原则：一个类只做一件事情，只有一个引起它变化的因素！
	3、里氏替换原则：子类必须能够替换基类
	4、依赖倒置原址：高层不依赖底层，抽象不依赖具体！
	5、接口隔离原则：使用多个小的专门接口，而不是使用一个非常大的接口！
	6、最小知识原则！
	
	面向对象编程oop
	- 封装：将数据和方法封装，外露接口
	- 继承：子类继承父类的方法和变量，并且子类可以独立扩展
	- 多态：不同类的对象对同一消息响应。如 鸭子.sound()/小鸡.sound()
	
	设计模式：为已知且明晰的问题提供标准化的解决方案，可以视为一种最佳实践，一种价值抽象、一种解决常见问题的模版！
	
	代码重构：
	1、提炼函数
	2、合并重复的条件片段
	3、把复杂条件语句提炼程函数，如isSummer()
	4、合理使用循环，如创建xhr时，ie的多版本就可以使用循环（迭代模式）
	5、使用return而不要迷信一个函数只有一个出口的观点！
	6、尽量减少参数的个数，使用对象！
	7、少用三目运算符
	8、合理使用链式调用
	9、分解大型类
*/



