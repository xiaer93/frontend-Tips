/*
	高性能js之字符串和正则表达式
	在js程序中，需要对字符串进行大量操作，有优化空间；一个设计不良好的正则表达式会导致恶意问题！
*/

/*
	字符串连接优化.
	- 连接方式：
		- str='a'+'b'
		- str+='a';str+='b'
		- str=['a','b'].join('');
		- str='a';str.concat('b','c');
*/

//优化1，变量名放在前面！
var str1="";
str1+="one"+"two";
//上述操作会先创建临时变量onetwo，接着再连接至str1的后面！
var str2="";
str2+="one";
str2+="two";

//优化2，对于大量字符，在IE7中数组的join合并效果更好！（对于非IE7，使用+或+=更快！）
var outInfo=['a','b','c'];
var str3=outInfo.join('');

//优化3，concat方法，原生字符串合并方法，但是效果比+和+=较慢！


/*
	正则表达式优化
	工作流程：编译为正则式》》》设置起始位置lastIndex》》》匹配、失败则回溯》》》匹配成功或失败
	建议：
		- 匹配内容更具体，避免回溯：如匹配双引号内容/^"(?:\w+)"$/
		- 使用断言减少回溯点，如匹配html内容/<html>(?=[\s\S]*?<head>)/
		- 避免使用嵌套量词，如/(a+a+)+b/，其内部匹配会产生多种结果！优化/aa+b/
		- 正则表达式慢的原因是匹配失败，关注匹配失败的过程！
		- 正则表达式以简单、必需的字元开始（如\d、^、$等），避免以分组或选择字元开头！
		- 当使用量词模式时，必须确保后面的字元与前者互斥！！！
		- 减少分支数量：如/cat|bat/改为/[cb]at/；如/red|read/改为/rea?d/；如/red|raw/改为/r(?:ed|aw)/；如/.|\r|\n/改为/[\s\S]/
		- 使用非捕获组，捕获组会消耗事件和内存来记录引用！
		- 只捕获感兴趣，如只想捕获引号内的内容！
		- 暴露必需的字元
		- 使用合适的量词，选择合适的模式（贪婪或惰性）
		- 避免在循环体中反复编译正则表达式！如while(/[a-zA-Z]at/.test(str)
		- 将复杂的正则表达式拆分为简单的片段，化繁为简。在一个正则表达式结构中执行另一个正则表达式。。。
	
*/
